{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Salon Booking Guru A salon client booking and management system. What is Salon Booking Guru? Salon Booking Guru is a management system to allow salon owners to insert, modify, and delete products which salon clients may book. Key features: Collect a deposit from clients for treatment to reduce cancellations Staff can enter their availability Clients may book treatments Clients get a reminder about their booking An automated self-service web front-end (mobile & tablet friendly) What is offered to users? The owner Create, modify, and delete products by category Create, modify, and delete staff Create, modify, and delete which staff members can perform treatments Create, modify, and delete availability periods The staff Update their own personal availability Notification of when their a slot in their availblility period has been booked The client Show available appointment times Pay a deposit Receive meaningful reminders of the appointment Method of cancellation","title":"Home"},{"location":"#salon-booking-guru","text":"A salon client booking and management system.","title":"Salon Booking Guru"},{"location":"#what-is-salon-booking-guru","text":"Salon Booking Guru is a management system to allow salon owners to insert, modify, and delete products which salon clients may book. Key features: Collect a deposit from clients for treatment to reduce cancellations Staff can enter their availability Clients may book treatments Clients get a reminder about their booking An automated self-service web front-end (mobile & tablet friendly)","title":"What is Salon Booking Guru?"},{"location":"#what-is-offered-to-users","text":"","title":"What is offered to users?"},{"location":"#the-owner","text":"Create, modify, and delete products by category Create, modify, and delete staff Create, modify, and delete which staff members can perform treatments Create, modify, and delete availability periods","title":"The owner"},{"location":"#the-staff","text":"Update their own personal availability Notification of when their a slot in their availblility period has been booked","title":"The staff"},{"location":"#the-client","text":"Show available appointment times Pay a deposit Receive meaningful reminders of the appointment Method of cancellation","title":"The client"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community and platform Encourage helping each other learn (e.g. pair programming) from each others experience Showing empathy towards other community members and users Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community and platform Encourage helping each other learn (e.g. pair programming) from each others experience Showing empathy towards other community members and users Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing Main branch is always deployable To support continuous delivery the branch called main is always deployable. Issues are always created off of the main branch. Issue branches are always merged into the main branch. See Git Pull Request Process . Git Pull Request Process- every issue is a branch In short: Always create an issue first, get it's issue number and prefix your branch name with the issue number. See also Everything starts with an issue Question: I would like to ask for an explanation about git best practices. Like naming branches etc, I was in most cases working alone on projects so things like this were not important to me but now I need some guidance about these things. Answer: Contributions and changes must start with creating an issue, even if a tiny change. This gives you an issue number to use later on, the issue number is the branch name prefix. E.g. issue 123-<human-readable-name> this way, you always know which issue a branch relates to. How to create issue branches Locally: Checkout to main branch git checkout main (because you always want to branch of the most up to date code) Make sure your main branch is up to date. git fetch (this fetches all changes into the .git folder , but it does not change your files yet) git rebase origin/main (this does change your files and makes them up to date with main) and is safe to do- never rebase a shared branch you're collaborating on Create a new branch for the issue, using the number e.g. git checkout 376-add-edit-product (remember you're on the main branch , which is good because it contains the most up to date code because you fetched, then rebased) git checkout -b <issue-number>-name-of-issue do your coding , creating small commits which reference the issue e.g. if you updated template.html file git add <file> (or which ever files you've added/changed) git commit -m \"Fix #376 add edit product\" when you use the \"# \" in a commit message, GitHub automatically shows that commit on the GitHub issue. This is very useful for seeing the issue/code relationship. When you say git commit -m \"Fix #<issue number> my comment about the code , if the commit is merged into main, then it automatically close the issue (great time saver!) If you're finished , push the branch , but wait! Maybe the main branch has more changes since you wrote your code... you need to fetch and apply those first git fetch origin/main (fetches any changes which happened whilst you were working) git pull origin/main n (applies those changes to your current branch) notice we're using pull and not rebase in case we're collaborating with another person Now you're ready to push! Finally! git push origin 376-<issue-name> Never use force push if your working with others in the branch, it will destroy their work. If you're not 100% sure, don't ever use force push. It's rarely needed Go to GitHub and raise a pull request There is no need to delete the branch remotely because branches are copy on write (very tiny file size) but locally you might want to delete them if you have hundreds or don't want to see them anymore ( git branch -d <branch-name> ) It's normally unhelpful to delete a local branch 10mins after raising a pull request, because you might need to add things later on. You can always get the branch back, it takes seconds, but it's a hassle. Just keep the branch locally , it's not causing any problems, it's helping you because you might want to go back to it in a few weeks.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#main-branch-is-always-deployable","text":"To support continuous delivery the branch called main is always deployable. Issues are always created off of the main branch. Issue branches are always merged into the main branch. See Git Pull Request Process .","title":"Main branch is always deployable"},{"location":"CONTRIBUTING/#git-pull-request-process-every-issue-is-a-branch","text":"In short: Always create an issue first, get it's issue number and prefix your branch name with the issue number. See also Everything starts with an issue Question: I would like to ask for an explanation about git best practices. Like naming branches etc, I was in most cases working alone on projects so things like this were not important to me but now I need some guidance about these things. Answer: Contributions and changes must start with creating an issue, even if a tiny change. This gives you an issue number to use later on, the issue number is the branch name prefix. E.g. issue 123-<human-readable-name> this way, you always know which issue a branch relates to.","title":"Git Pull Request Process- every issue is a branch"},{"location":"CONTRIBUTING/#how-to-create-issue-branches","text":"Locally: Checkout to main branch git checkout main (because you always want to branch of the most up to date code) Make sure your main branch is up to date. git fetch (this fetches all changes into the .git folder , but it does not change your files yet) git rebase origin/main (this does change your files and makes them up to date with main) and is safe to do- never rebase a shared branch you're collaborating on Create a new branch for the issue, using the number e.g. git checkout 376-add-edit-product (remember you're on the main branch , which is good because it contains the most up to date code because you fetched, then rebased) git checkout -b <issue-number>-name-of-issue do your coding , creating small commits which reference the issue e.g. if you updated template.html file git add <file> (or which ever files you've added/changed) git commit -m \"Fix #376 add edit product\" when you use the \"# \" in a commit message, GitHub automatically shows that commit on the GitHub issue. This is very useful for seeing the issue/code relationship. When you say git commit -m \"Fix #<issue number> my comment about the code , if the commit is merged into main, then it automatically close the issue (great time saver!) If you're finished , push the branch , but wait! Maybe the main branch has more changes since you wrote your code... you need to fetch and apply those first git fetch origin/main (fetches any changes which happened whilst you were working) git pull origin/main n (applies those changes to your current branch) notice we're using pull and not rebase in case we're collaborating with another person Now you're ready to push! Finally! git push origin 376-<issue-name> Never use force push if your working with others in the branch, it will destroy their work. If you're not 100% sure, don't ever use force push. It's rarely needed Go to GitHub and raise a pull request There is no need to delete the branch remotely because branches are copy on write (very tiny file size) but locally you might want to delete them if you have hundreds or don't want to see them anymore ( git branch -d <branch-name> ) It's normally unhelpful to delete a local branch 10mins after raising a pull request, because you might need to add things later on. You can always get the branch back, it takes seconds, but it's a hassle. Just keep the branch locally , it's not causing any problems, it's helping you because you might want to go back to it in a few weeks.","title":"How to create issue branches"},{"location":"DATABASE/","text":"Database Current entity relationship diagram Summary In the root of the repository there is a directory named uml/ , which contains a .uml file. This markdown is written in PlantUML and it should describe the most up to date version of the database schema required by the API. There is also a .png file, which is the resultant output of processing the .uml file. This image shows a visual representation of the database schema as a comprehensive entity relationship diagram from this you will be able to see all of the tables which are created and used by the API, and their relationship with other tables, as well as which fields each table contains. Modifying the ERD In the event that you modify the existing schema of the database by implementing a new migration in the API, you must ensure the ERD is synchronised accordingly. While the best place to look for advice on how to modify the .uml file to achieve a desired result is the official PlantUML documentation, the docs can oftentimes explain more than is necessary since the markdown itself is very flexible. Our current implementation only takes advantage of a couple of its features, and thus it is worthwhile briefly explaining in this document how we are currently using it. Each table is treated as an \"entity\", and is defined underneath the ** Entities ** comment in db-erd.uml , here is an example: entity \"account\" as account { *id : integer <<PK>> -- *role_id : integer <<FK>> *first_name : varchar *last_name : varchar *email : varchar(254) *password : varchar(64) *mobile_number : varchar() } This describes a table called account with a primary key (PK) called id , a single foreign key (FK) called role_id , and some additional fields. Take note of the fact each field is typed (e.g. varchar, integer, etc.), and labeled if the field represents a primary or foreign key. Underneath all of the entities, there is an ** Entity Relationships ** comment which describes the relationship between each of the entities (e.g. one-to-many) with another comment showing which characters represent different types of relational symbology: ' Zero or One: |o.. ' Exactly One: ||.. ' Zero or Many: }o.. ' One or Many: }|.. So to create a many-to-one relationship between two tables, let's call them account and role , you would write: account }o..|| role With this information alone, you should be able to help maintain and contribute to the ERD. How to generate a PNG from the UML First, ensure you have docker installed on your machine. Included in the uml/ directory is a script called plantuml.sh , this script consumes one argument, and it processes a .uml file into a .png file. To do this, first change into the uml/ directory: cd uml/ Then run the script and pass in the path to the file you would like to process: ./plantuml.sh db-erd.uml You should expect to see a new .png file in the uml/ directory if there wasn't one already.","title":"Database"},{"location":"DATABASE/#database","text":"","title":"Database"},{"location":"DATABASE/#current-entity-relationship-diagram","text":"","title":"Current entity relationship diagram"},{"location":"DATABASE/#summary","text":"In the root of the repository there is a directory named uml/ , which contains a .uml file. This markdown is written in PlantUML and it should describe the most up to date version of the database schema required by the API. There is also a .png file, which is the resultant output of processing the .uml file. This image shows a visual representation of the database schema as a comprehensive entity relationship diagram from this you will be able to see all of the tables which are created and used by the API, and their relationship with other tables, as well as which fields each table contains.","title":"Summary"},{"location":"DATABASE/#modifying-the-erd","text":"In the event that you modify the existing schema of the database by implementing a new migration in the API, you must ensure the ERD is synchronised accordingly. While the best place to look for advice on how to modify the .uml file to achieve a desired result is the official PlantUML documentation, the docs can oftentimes explain more than is necessary since the markdown itself is very flexible. Our current implementation only takes advantage of a couple of its features, and thus it is worthwhile briefly explaining in this document how we are currently using it. Each table is treated as an \"entity\", and is defined underneath the ** Entities ** comment in db-erd.uml , here is an example: entity \"account\" as account { *id : integer <<PK>> -- *role_id : integer <<FK>> *first_name : varchar *last_name : varchar *email : varchar(254) *password : varchar(64) *mobile_number : varchar() } This describes a table called account with a primary key (PK) called id , a single foreign key (FK) called role_id , and some additional fields. Take note of the fact each field is typed (e.g. varchar, integer, etc.), and labeled if the field represents a primary or foreign key. Underneath all of the entities, there is an ** Entity Relationships ** comment which describes the relationship between each of the entities (e.g. one-to-many) with another comment showing which characters represent different types of relational symbology: ' Zero or One: |o.. ' Exactly One: ||.. ' Zero or Many: }o.. ' One or Many: }|.. So to create a many-to-one relationship between two tables, let's call them account and role , you would write: account }o..|| role With this information alone, you should be able to help maintain and contribute to the ERD.","title":"Modifying the ERD"},{"location":"DATABASE/#how-to-generate-a-png-from-the-uml","text":"First, ensure you have docker installed on your machine. Included in the uml/ directory is a script called plantuml.sh , this script consumes one argument, and it processes a .uml file into a .png file. To do this, first change into the uml/ directory: cd uml/ Then run the script and pass in the path to the file you would like to process: ./plantuml.sh db-erd.uml You should expect to see a new .png file in the uml/ directory if there wasn't one already.","title":"How to generate a PNG from the UML"},{"location":"QUICK_START_GUIDE/","text":"Quick-start guide This guide will help you quickly configure and launch an instance of the Salon Booking Guru with the intent of developing on the codebase. Database Set-up To allow the API to have persistent data storage, you must first have a PostgreSQL database running, we have provided a script in to start a PostgreSQL instance using docker: postgres/run.sh Note: This database configuration should only ever be used for the purpose of local development, since all credentials are stored in this public repository. API Set-up Now you have a PostgreSQL database up and running on your local machine, you will be able to run the API. In the future we will achieve this by using Docker, however for now, you must build the API yourself using golang's compiler. First ensure you have Golang installed and configured, then change into the api/ directory: cd api/ Then use the run.sh script to install all dependencies, build a binary, and run the binary: ./run.sh For this to work, it is likely that this repository will need to exist in the correct location of your GOPATH, you directory structure should look something like this on a UNIX environment: ~/go/src/github.com/KarmaComputing/salon-booking-guru/ For more information on how the GOPATH works, check out this article by Digital Ocean . Note: The environment variables set in api/run.sh match those of the postgres docker container started by postgres/run.sh . Front-end Set-up Similarly to the API, we will eventually use docker to start an instance of the front-end, however in the meantime you must use either npm or yarn . First ensure you have Node installed, and optionally yarn. Then change into the front-end/ directory: cd front-end/ Then install all dependencies using either: npm i OR yarn You will then be able to start the front-end server using: npm run serve OR yarn serve","title":"Quick-Start Guide"},{"location":"QUICK_START_GUIDE/#quick-start-guide","text":"This guide will help you quickly configure and launch an instance of the Salon Booking Guru with the intent of developing on the codebase.","title":"Quick-start guide"},{"location":"QUICK_START_GUIDE/#database-set-up","text":"To allow the API to have persistent data storage, you must first have a PostgreSQL database running, we have provided a script in to start a PostgreSQL instance using docker: postgres/run.sh Note: This database configuration should only ever be used for the purpose of local development, since all credentials are stored in this public repository.","title":"Database Set-up"},{"location":"QUICK_START_GUIDE/#api-set-up","text":"Now you have a PostgreSQL database up and running on your local machine, you will be able to run the API. In the future we will achieve this by using Docker, however for now, you must build the API yourself using golang's compiler. First ensure you have Golang installed and configured, then change into the api/ directory: cd api/ Then use the run.sh script to install all dependencies, build a binary, and run the binary: ./run.sh For this to work, it is likely that this repository will need to exist in the correct location of your GOPATH, you directory structure should look something like this on a UNIX environment: ~/go/src/github.com/KarmaComputing/salon-booking-guru/ For more information on how the GOPATH works, check out this article by Digital Ocean . Note: The environment variables set in api/run.sh match those of the postgres docker container started by postgres/run.sh .","title":"API Set-up"},{"location":"QUICK_START_GUIDE/#front-end-set-up","text":"Similarly to the API, we will eventually use docker to start an instance of the front-end, however in the meantime you must use either npm or yarn . First ensure you have Node installed, and optionally yarn. Then change into the front-end/ directory: cd front-end/ Then install all dependencies using either: npm i OR yarn You will then be able to start the front-end server using: npm run serve OR yarn serve","title":"Front-end Set-up"},{"location":"WIREFRAMES/","text":"Wireframes All wireframes are currently built using draw.io , to open the .xml files in wireframes/ simply go to https://app.diagrams.net/ and open the files using their GUI. Alternatively use your favorite image viewer to open any of the .png files. Making a booking Salon users","title":"Wireframes"},{"location":"WIREFRAMES/#wireframes","text":"All wireframes are currently built using draw.io , to open the .xml files in wireframes/ simply go to https://app.diagrams.net/ and open the files using their GUI. Alternatively use your favorite image viewer to open any of the .png files.","title":"Wireframes"},{"location":"WIREFRAMES/#making-a-booking","text":"","title":"Making a booking"},{"location":"WIREFRAMES/#salon-users","text":"","title":"Salon users"},{"location":"deployment/","text":"Deployment Automatic deployment using Dokku and GitHub Actions Create VPS Create a VPS using any preferred service Choose Ubuntu 20.04 LTS Choose a hostname with the domain name that you want to use for your dokku apps Setup Dokku We are going to install Dokku v0.24.10 On the VPS Install Dokku by using the following commands wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh; sudo DOKKU_TAG=v0.24.10 bash bootstrap.sh Change to the Dokku user su dokku If dokku was able to resolve the hostname for the VPS then a global domain will have already been added To check this use the command dokku domains:report --global and dokku domains:add-global <domain> Set Up SSH Keys and Virtualhost Settings On a web browser: - Navigate to the ip or domain name of the dokku server - Add your desired SSH public keys for remote access - Tick \"Use virtualhost naming for apps\" as we may have multiple dokku apps Quick Security Now that you have added your SSH public key you may disable password access Open /etc/ssh/sshd_config in a text editor and change the line #PasswordAuthentication yes to PasswordAuthentication no Deploy Dokku On the VPS Create an app using dokku apps:create salon-booking-guru Now we want to set the deploy branch on Dokku. The default deploy branch is master but our repository uses main . - Change it by using the command dokku git:set salon-booking-guru deploy-branch main Dockerfile configuration For this version of dokku (v0.24.10) Dockerfile deployment is only recognised when there is a dockerfile in the root directory of the repository. - The api Dockerfile in this repository is found under api/ - A current workaround means that there is an empty Dockerfile in the root Dokku Dockerfile Path Now that dokku recognises that we want to deploy using Dockerimage we want to now give it the correct path to the api Dockerfile On the VPS Run this command to add the correct Dockerfile path for the build phase of deployment dokku docker-options:add salon-booking-guru build --file=/home/dokku/salon-booking-guru/api/Dockerfile We must also manually add the Dockerfile (outside of version control) to the bare repo within dokku, so that it can build it. Use mkdir -p /home/dokku/salon-booking-guru/api/ && cd /home/dokku/salon-booking-guru/api/ && wget https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/api/Dockerfile Quick Check Note: Still yet to figure out how to set build context in dokku so there will be Go module errors To make sure everything is in order, you can manually push to Dokku. - git clone the repository on your local machine - Add the dokku remote: git remote add dokku dokku@<ip/domain>:salon-booking-guru - Now git push dokku main Set Up GitHub Actions Create a yaml file within the path .github/workflows/api-deploy.yml In the file: Specify the GitHub event that triggers the workflow Use the key on: to specify the event, we want push From here you can add keys to specify the branch, we want main Note: workflow_dispatch will allow you to rerun GitHub actions on demand. It will look like this: name: Deploy API on: workflow_dispatch: push: branches: - main Now its time to create a job for the workflow run: Define a job jobs: Give the job a unique name by using a key Specify the runner environment, we are using ubuntu-20.04 Now create the steps for the job: Use the actions/checkout@v2 to fetch the code from the main branch that we specified You should specify fetch-depth: 0 to fetch all history Now make the first job! You must give the job an id and optionally a name We are using idoberko2/dokku-deploy-github-action@v1 for this job Within the with: key we specify all the sensitive details for the dokku server, store them in the repo secrets For this deployment we specify SSH-PRIVATE-KEY , APP-NAME and DOKKU-HOST Then specify the REMOTE-BRANCH , as written before we want main This will look like: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: fetch-depth: 0 - id: deploy name: Deploy to Dokku uses: idoberko2/dokku-deploy-github-action@v1 with: ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} dokku-host: ${{ secrets.DOKKU_HOST }} app-name: ${{ secrets.DOKKU_APP_NAME }} remote-branch: main","title":"Deployment"},{"location":"deployment/#deployment","text":"Automatic deployment using Dokku and GitHub Actions","title":"Deployment"},{"location":"deployment/#create-vps","text":"Create a VPS using any preferred service Choose Ubuntu 20.04 LTS Choose a hostname with the domain name that you want to use for your dokku apps","title":"Create VPS"},{"location":"deployment/#setup-dokku","text":"We are going to install Dokku v0.24.10","title":"Setup Dokku"},{"location":"deployment/#on-the-vps","text":"Install Dokku by using the following commands wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh; sudo DOKKU_TAG=v0.24.10 bash bootstrap.sh Change to the Dokku user su dokku If dokku was able to resolve the hostname for the VPS then a global domain will have already been added To check this use the command dokku domains:report --global and dokku domains:add-global <domain>","title":"On the VPS"},{"location":"deployment/#set-up-ssh-keys-and-virtualhost-settings","text":"On a web browser: - Navigate to the ip or domain name of the dokku server - Add your desired SSH public keys for remote access - Tick \"Use virtualhost naming for apps\" as we may have multiple dokku apps","title":"Set Up SSH Keys and Virtualhost Settings"},{"location":"deployment/#quick-security","text":"Now that you have added your SSH public key you may disable password access Open /etc/ssh/sshd_config in a text editor and change the line #PasswordAuthentication yes to PasswordAuthentication no","title":"Quick Security"},{"location":"deployment/#deploy-dokku","text":"","title":"Deploy Dokku"},{"location":"deployment/#on-the-vps_1","text":"Create an app using dokku apps:create salon-booking-guru Now we want to set the deploy branch on Dokku. The default deploy branch is master but our repository uses main . - Change it by using the command dokku git:set salon-booking-guru deploy-branch main","title":"On the VPS"},{"location":"deployment/#dockerfile-configuration","text":"For this version of dokku (v0.24.10) Dockerfile deployment is only recognised when there is a dockerfile in the root directory of the repository. - The api Dockerfile in this repository is found under api/ - A current workaround means that there is an empty Dockerfile in the root","title":"Dockerfile configuration"},{"location":"deployment/#dokku-dockerfile-path","text":"Now that dokku recognises that we want to deploy using Dockerimage we want to now give it the correct path to the api Dockerfile","title":"Dokku Dockerfile Path"},{"location":"deployment/#on-the-vps_2","text":"Run this command to add the correct Dockerfile path for the build phase of deployment dokku docker-options:add salon-booking-guru build --file=/home/dokku/salon-booking-guru/api/Dockerfile We must also manually add the Dockerfile (outside of version control) to the bare repo within dokku, so that it can build it. Use mkdir -p /home/dokku/salon-booking-guru/api/ && cd /home/dokku/salon-booking-guru/api/ && wget https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/api/Dockerfile","title":"On the VPS"},{"location":"deployment/#quick-check","text":"Note: Still yet to figure out how to set build context in dokku so there will be Go module errors To make sure everything is in order, you can manually push to Dokku. - git clone the repository on your local machine - Add the dokku remote: git remote add dokku dokku@<ip/domain>:salon-booking-guru - Now git push dokku main","title":"Quick Check"},{"location":"deployment/#set-up-github-actions","text":"Create a yaml file within the path .github/workflows/api-deploy.yml","title":"Set Up GitHub Actions"},{"location":"deployment/#in-the-file","text":"Specify the GitHub event that triggers the workflow Use the key on: to specify the event, we want push From here you can add keys to specify the branch, we want main Note: workflow_dispatch will allow you to rerun GitHub actions on demand. It will look like this: name: Deploy API on: workflow_dispatch: push: branches: - main","title":"In the file:"},{"location":"deployment/#now-its-time-to-create-a-job-for-the-workflow-run","text":"Define a job jobs: Give the job a unique name by using a key Specify the runner environment, we are using ubuntu-20.04","title":"Now its time to create a job for the workflow run:"},{"location":"deployment/#now-create-the-steps-for-the-job","text":"Use the actions/checkout@v2 to fetch the code from the main branch that we specified You should specify fetch-depth: 0 to fetch all history Now make the first job! You must give the job an id and optionally a name We are using idoberko2/dokku-deploy-github-action@v1 for this job Within the with: key we specify all the sensitive details for the dokku server, store them in the repo secrets For this deployment we specify SSH-PRIVATE-KEY , APP-NAME and DOKKU-HOST Then specify the REMOTE-BRANCH , as written before we want main This will look like: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: fetch-depth: 0 - id: deploy name: Deploy to Dokku uses: idoberko2/dokku-deploy-github-action@v1 with: ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} dokku-host: ${{ secrets.DOKKU_HOST }} app-name: ${{ secrets.DOKKU_APP_NAME }} remote-branch: main","title":"Now create the steps for the job:"}]}